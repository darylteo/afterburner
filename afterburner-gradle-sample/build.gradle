buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		// import this for the TransformationTask
		classpath 'com.darylteo.gradle:javassist-plugin:0.2.1'

		// you only need this if you're doing configuration based configuration
		// or if you're creating the ClassTransformer in script rather than in buildSrc
		classpath 'com.github.stephanenicolas.afterburner:afterburner-library:1.0.0'
	}
}

apply plugin: 'java'

import com.github.stephanenicolas.afterburner.AfterBurner
import com.github.stephanenicolas.afterburner.InsertableMethodBuilder
import com.darylteo.gradle.javassist.tasks.TransformationTask

// configuration based transformation
task transform1(type: TransformationTask) {
  from sourceSets.main.output
  into("${buildDir}/transforms/transform1")

	def afterBurner = new AfterBurner(logger); // this uses Gradle's logger

  where { c ->
		c.methods.find { method -> 
			method.name == 'doStuff' || method.name == 'doOtherStuff'
		} != null
  }.transform { c ->
		afterBurner.afterOverrideMethod(c, "doStuff", "System.out.println(\"Inside doStuff\");");

		def builder = new InsertableMethodBuilder(afterBurner);
		builder
			.insertIntoClass(c)
			.inMethodIfExists("doOtherStuff")
			.beforeACallTo("bar")
			.withBody("System.out.println(\"Inside doOtherStuff\");")
			.elseCreateMethodIfNotExists("public void doOtherStuff() { ___BODY___ }")
			.doIt();
  }
}

// transformation with transformer implementation
task transform2(type: TransformationTask) {
  from sourceSets.main.output
  into("${buildDir}/transforms/transform2")

  // look in buildSrc folder for this transformer. Alternatively, you can 
  // write an implementation of the transformer within the script itself.
  // but this will make the build slower since it has to be compiled each time
  // you run the build
  transformation = new com.github.stephanenicolas.afterburner.sample.ExampleProcessor()
}

// the outputs of the two transformation tasks will go into /build/transforms
// you don't need to worry about this though, as Gradle is perfectly capable of 
// figuring out what you want to do through its TaskInputs and TaskOutputs properties.
task transformedJar(type: Jar) {
	from transform1 // this is the task above
}